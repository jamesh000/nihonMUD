// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: serial.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 9001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(daf710df78d5f02b);
CAPNP_DECLARE_SCHEMA(c65f6d15de9d3058);
enum class Type_c65f6d15de9d3058: uint16_t {
  GO,
  TALK,
  ATTACK,
  BUY,
  SELL,
};
CAPNP_DECLARE_ENUM(Type, c65f6d15de9d3058);
CAPNP_DECLARE_SCHEMA(9a7ab0098d6c3e89);
CAPNP_DECLARE_SCHEMA(ec09b3ab3539bd51);

}  // namespace schemas
}  // namespace capnp


struct Command {
  Command() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Type_c65f6d15de9d3058 Type;

  struct Amount;
  struct Preposition;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(daf710df78d5f02b, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Command::Amount {
  Amount() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    NONE,
    NUM,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9a7ab0098d6c3e89, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Command::Preposition {
  Preposition() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    NONE,
    WEAPON,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ec09b3ab3539bd51, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Command::Reader {
public:
  typedef Command Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::Command::Type getPredicate() const;

  inline  ::uint32_t getSubject() const;

  inline typename Amount::Reader getAmount() const;

  inline typename Preposition::Reader getPreposition() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Command::Builder {
public:
  typedef Command Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::Command::Type getPredicate();
  inline void setPredicate( ::Command::Type value);

  inline  ::uint32_t getSubject();
  inline void setSubject( ::uint32_t value);

  inline typename Amount::Builder getAmount();
  inline typename Amount::Builder initAmount();

  inline typename Preposition::Builder getPreposition();
  inline typename Preposition::Builder initPreposition();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Command::Pipeline {
public:
  typedef Command Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Amount::Pipeline getAmount();
  inline typename Preposition::Pipeline getPreposition();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Command::Amount::Reader {
public:
  typedef Amount Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isNone() const;
  inline  ::capnp::Void getNone() const;

  inline bool isNum() const;
  inline  ::uint32_t getNum() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Command::Amount::Builder {
public:
  typedef Amount Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isNone();
  inline  ::capnp::Void getNone();
  inline void setNone( ::capnp::Void value = ::capnp::VOID);

  inline bool isNum();
  inline  ::uint32_t getNum();
  inline void setNum( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Command::Amount::Pipeline {
public:
  typedef Amount Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Command::Preposition::Reader {
public:
  typedef Preposition Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isNone() const;
  inline  ::capnp::Void getNone() const;

  inline bool isWeapon() const;
  inline bool hasWeapon() const;
  inline  ::capnp::Text::Reader getWeapon() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Command::Preposition::Builder {
public:
  typedef Preposition Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isNone();
  inline  ::capnp::Void getNone();
  inline void setNone( ::capnp::Void value = ::capnp::VOID);

  inline bool isWeapon();
  inline bool hasWeapon();
  inline  ::capnp::Text::Builder getWeapon();
  inline void setWeapon( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initWeapon(unsigned int size);
  inline void adoptWeapon(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownWeapon();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Command::Preposition::Pipeline {
public:
  typedef Preposition Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::Command::Type Command::Reader::getPredicate() const {
  return _reader.getDataField< ::Command::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::Command::Type Command::Builder::getPredicate() {
  return _builder.getDataField< ::Command::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Command::Builder::setPredicate( ::Command::Type value) {
  _builder.setDataField< ::Command::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Command::Reader::getSubject() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Command::Builder::getSubject() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Command::Builder::setSubject( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline typename Command::Amount::Reader Command::Reader::getAmount() const {
  return typename Command::Amount::Reader(_reader);
}
inline typename Command::Amount::Builder Command::Builder::getAmount() {
  return typename Command::Amount::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Command::Amount::Pipeline Command::Pipeline::getAmount() {
  return typename Command::Amount::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Command::Amount::Builder Command::Builder::initAmount() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(::capnp::bounded<2>() * ::capnp::ELEMENTS, 0);
  return typename Command::Amount::Builder(_builder);
}
inline typename Command::Preposition::Reader Command::Reader::getPreposition() const {
  return typename Command::Preposition::Reader(_reader);
}
inline typename Command::Preposition::Builder Command::Builder::getPreposition() {
  return typename Command::Preposition::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Command::Preposition::Pipeline Command::Pipeline::getPreposition() {
  return typename Command::Preposition::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Command::Preposition::Builder Command::Builder::initPreposition() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<6>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS).clear();
  return typename Command::Preposition::Builder(_builder);
}
inline  ::Command::Amount::Which Command::Amount::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline  ::Command::Amount::Which Command::Amount::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool Command::Amount::Reader::isNone() const {
  return which() == Command::Amount::NONE;
}
inline bool Command::Amount::Builder::isNone() {
  return which() == Command::Amount::NONE;
}
inline  ::capnp::Void Command::Amount::Reader::getNone() const {
  KJ_IREQUIRE((which() == Command::Amount::NONE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Command::Amount::Builder::getNone() {
  KJ_IREQUIRE((which() == Command::Amount::NONE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Command::Amount::Builder::setNone( ::capnp::Void value) {
  _builder.setDataField<Command::Amount::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Command::Amount::NONE);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Command::Amount::Reader::isNum() const {
  return which() == Command::Amount::NUM;
}
inline bool Command::Amount::Builder::isNum() {
  return which() == Command::Amount::NUM;
}
inline  ::uint32_t Command::Amount::Reader::getNum() const {
  KJ_IREQUIRE((which() == Command::Amount::NUM),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Command::Amount::Builder::getNum() {
  KJ_IREQUIRE((which() == Command::Amount::NUM),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Command::Amount::Builder::setNum( ::uint32_t value) {
  _builder.setDataField<Command::Amount::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Command::Amount::NUM);
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::Command::Preposition::Which Command::Preposition::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline  ::Command::Preposition::Which Command::Preposition::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline bool Command::Preposition::Reader::isNone() const {
  return which() == Command::Preposition::NONE;
}
inline bool Command::Preposition::Builder::isNone() {
  return which() == Command::Preposition::NONE;
}
inline  ::capnp::Void Command::Preposition::Reader::getNone() const {
  KJ_IREQUIRE((which() == Command::Preposition::NONE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Command::Preposition::Builder::getNone() {
  KJ_IREQUIRE((which() == Command::Preposition::NONE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Command::Preposition::Builder::setNone( ::capnp::Void value) {
  _builder.setDataField<Command::Preposition::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Command::Preposition::NONE);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Command::Preposition::Reader::isWeapon() const {
  return which() == Command::Preposition::WEAPON;
}
inline bool Command::Preposition::Builder::isWeapon() {
  return which() == Command::Preposition::WEAPON;
}
inline bool Command::Preposition::Reader::hasWeapon() const {
  if (which() != Command::Preposition::WEAPON) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Command::Preposition::Builder::hasWeapon() {
  if (which() != Command::Preposition::WEAPON) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Command::Preposition::Reader::getWeapon() const {
  KJ_IREQUIRE((which() == Command::Preposition::WEAPON),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Command::Preposition::Builder::getWeapon() {
  KJ_IREQUIRE((which() == Command::Preposition::WEAPON),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Command::Preposition::Builder::setWeapon( ::capnp::Text::Reader value) {
  _builder.setDataField<Command::Preposition::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Command::Preposition::WEAPON);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Command::Preposition::Builder::initWeapon(unsigned int size) {
  _builder.setDataField<Command::Preposition::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Command::Preposition::WEAPON);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Command::Preposition::Builder::adoptWeapon(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<Command::Preposition::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Command::Preposition::WEAPON);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Command::Preposition::Builder::disownWeapon() {
  KJ_IREQUIRE((which() == Command::Preposition::WEAPON),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}


CAPNP_END_HEADER

